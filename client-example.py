#!/usr/bin/env python3
"""
Client Python pour l'API de classification des prunes.
Cet utilitaire permet de tester l'API sans utiliser l'interface web.
"""

import requests
import argparse
import os
import json
import sys
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import io

# URL de base de l'API (√† modifier selon votre configuration)
BASE_URL = "https://api-prune.onrender.com"

# Classes de prunes avec traductions
PLUM_CLASSES = ["bruised", "cracked", "rotten", "spotted", "unaffected", "unripe"]
PLUM_TRANSLATIONS = {
    "bruised": "Meurtrie",
    "cracked": "Fissur√©e",
    "rotten": "Pourrie",
    "spotted": "Tachet√©e", 
    "unaffected": "Bonne qualit√©",
    "unripe": "Non m√ªre"
}

# Couleurs pour la visualisation
PLUM_COLORS = {
    "bruised": "#FFA726",  # Orange
    "cracked": "#EF5350",  # Rouge
    "rotten": "#8D6E63",   # Marron
    "spotted": "#FFEE58",  # Jaune
    "unaffected": "#66BB6A",  # Vert
    "unripe": "#42A5F5"   # Bleu
}

def check_api_health():
    """V√©rifie l'√©tat de sant√© de l'API."""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "healthy" and data.get("model_loaded"):
                print("‚úÖ API en bon √©tat et mod√®le charg√© correctement")
                return True
            else:
                print("‚ö†Ô∏è API en ligne mais √©tat anormal:", data)
                return False
        else:
            print(f"‚ö†Ô∏è API en ligne mais code d'√©tat anormal: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Impossible de se connecter √† l'API: {e}")
        return False

def predict_image(image_path, visualize=False, save_output=None):
    """
    Envoie une image √† l'API pour classification.
    
    Args:
        image_path: Chemin vers l'image √† classifier
        visualize: Afficher une visualisation graphique des r√©sultats
        save_output: Chemin o√π sauvegarder les r√©sultats en JSON (optionnel)
    
    Returns:
        Les r√©sultats de la pr√©diction ou None en cas d'erreur
    """
    if not os.path.exists(image_path):
        print(f"‚ùå L'image {image_path} n'existe pas")
        return None
    
    try:
        # Pr√©parer la requ√™te multipart/form-data
        files = {'file': (os.path.basename(image_path), open(image_path, 'rb'), 'image/jpeg')}
        
        # Envoyer la requ√™te
        print(f"üì§ Envoi de l'image {os.path.basename(image_path)} √† l'API...")
        start_time = datetime.now()
        
        response = requests.post(f"{BASE_URL}/predict/", files=files)
        
        # Calcul du temps total (client + API)
        total_time = (datetime.now() - start_time).total_seconds() * 1000
        
        # Traiter la r√©ponse
        if response.status_code == 200:
            result = response.json()
            
            # Ajouter le temps total pour r√©f√©rence
            result["total_time_ms"] = total_time
            
            # Afficher les r√©sultats
            print_results(result)
            
            # Visualiser les r√©sultats si demand√©
            if visualize:
                visualize_results(image_path, result)
            
            # Sauvegarder les r√©sultats si demand√©
            if save_output:
                save_results(result, save_output, image_path)
            
            return result
        else:
            try:
                error = response.json()
                print(f"‚ùå Erreur API ({response.status_code}): {error.get('detail', 'Erreur inconnue')}")
            except json.JSONDecodeError:
                print(f"‚ùå Erreur API ({response.status_code}): {response.text}")
            return None
    
    except Exception as e:
        print(f"‚ùå Erreur lors de la classification: {str(e)}")
        return None

def print_results(result):
    """Affiche les r√©sultats de la pr√©diction de mani√®re format√©e."""
    print("\nüìä R√âSULTATS DE LA CLASSIFICATION")
    print("=" * 40)
    
    predicted_class = result["predicted_class"]
    predicted_class_fr = result["predicted_class_fr"]
    confidence = result["confidence"]
    
    print(f"üè∑Ô∏è  Classe pr√©dite: {predicted_class_fr} ({predicted_class})")
    print(f"üéØ Confiance: {confidence:.2%}")
    print(f"‚è±Ô∏è  Temps de traitement API: {result['processing_time_ms']:.1f} ms")
    if "total_time_ms" in result:
        print(f"‚è±Ô∏è  Temps total (client + API): {result['total_time_ms']:.1f} ms")
    
    print("\nüìà Probabilit√©s par classe:")
    print("-" * 40)
    
    # Trier les probabilit√©s par ordre d√©croissant
    sorted_probs = sorted(
        result["probabilities"].items(), 
        key=lambda x: x[1], 
        reverse=True
    )
    
    # Afficher les probabilit√©s avec barres de progression
    terminal_width = get_terminal_width()
    bar_width = min(50, terminal_width - 30)
    
    for class_name, prob in sorted_probs:
        class_fr = PLUM_TRANSLATIONS.get(class_name, class_name)
        bar = "‚ñà" * int(prob * bar_width)
        spaces = " " * (bar_width - len(bar))
        print(f"{class_fr:12} ‚îÇ {bar}{spaces} ‚îÇ {prob:.2%}")
    
    print("=" * 40)

def get_terminal_width():
    """Obtient la largeur du terminal."""
    try:
        return os.get_terminal_size().columns
    except:
        return 80  # Valeur par d√©faut

def visualize_results(image_path, result):
    """
    Visualise les r√©sultats de la classification avec matplotlib.
    
    Args:
        image_path: Chemin vers l'image classifi√©e
        result: Dictionnaire des r√©sultats de la pr√©diction
    """
    try:
        # Charger l'image
        img = Image.open(image_path)
        
        # Cr√©er la figure avec deux sous-graphiques
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))
        
        # Afficher l'image
        ax1.imshow(img)
        ax1.set_title("Image analys√©e")
        ax1.axis('off')
        
        # Ajouter un texte avec la pr√©diction
        predicted_class = result["predicted_class"]
        confidence = result["confidence"]
        predicted_class_fr = result["predicted_class_fr"]
        
        # Ajouter un texte avec fond color√© pour la pr√©diction
        text_box = dict(
            boxstyle="round,pad=0.5",
            facecolor=PLUM_COLORS.get(predicted_class, "#666666"),
            alpha=0.8,
            edgecolor="none"
        )
        
        ax1.text(0.5, 0.05, 
                f"{predicted_class_fr}\nConfiance: {confidence:.2%}", 
                transform=ax1.transAxes,
                fontsize=14,
                color="white",
                bbox=text_box,
                horizontalalignment='center',
                verticalalignment='bottom')
        
        # Graphique des probabilit√©s
        ax2.set_title("Probabilit√©s par classe")
        
        # Trier les probabilit√©s
        sorted_probs = sorted(
            [(PLUM_TRANSLATIONS.get(cls, cls), prob, cls) 
             for cls, prob in result["probabilities"].items()],
            key=lambda x: x[1],
            reverse=True
        )
        
        classes_fr = [item[0] for item in sorted_probs]
        probs = [item[1] for item in sorted_probs]
        orig_classes = [item[2] for item in sorted_probs]
        colors = [PLUM_COLORS.get(cls, "#666666") for cls in orig_classes]
        
        # Cr√©er un graphique √† barres horizontales
        y_pos = np.arange(len(classes_fr))
        bars = ax2.barh(y_pos, probs, color=colors)
        ax2.set_yticks(y_pos)
        ax2.set_yticklabels(classes_fr)
        ax2.set_xlim(0, 1)
        ax2.set_xlabel('Probabilit√©')
        ax2.grid(axis='x', linestyle='--', alpha=0.7)
        
        # Ajouter les valeurs de probabilit√©
        for i, bar in enumerate(bars):
            width = bar.get_width()
            ax2.text(width + 0.01, bar.get_y() + bar.get_height()/2, 
                   f"{width:.1%}", va='center')
        
        # Ajouter des informations suppl√©mentaires
        proc_time = result["processing_time_ms"]
        total_time = result.get("total_time_ms", proc_time)
        
        plt.figtext(0.5, 0.01, 
                   f"Temps de traitement (API): {proc_time:.1f} ms | Total: {total_time:.1f} ms", 
                   ha='center', fontsize=10, style='italic')
        
        plt.tight_layout()
        plt.show()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la visualisation: {str(e)}")

def save_results(result, output_path, image_path):
    """
    Sauvegarde les r√©sultats au format JSON.
    
    Args:
        result: Dictionnaire des r√©sultats
        output_path: Chemin o√π sauvegarder les r√©sultats
        image_path: Chemin de l'image analys√©e
    """
    try:
        # Ajouter des m√©tadonn√©es
        result["metadata"] = {
            "image_path": image_path,
            "image_name": os.path.basename(image_path),
            "timestamp": datetime.now().isoformat(),
            "api_url": BASE_URL
        }
        
        # D√©terminer le chemin de sortie
        if os.path.isdir(output_path):
            # Si c'est un r√©pertoire, cr√©er un nouveau fichier
            base_name = os.path.splitext(os.path.basename(image_path))[0]
            json_path = os.path.join(output_path, f"{base_name}_result.json")
        else:
            # Sinon utiliser le chemin directement
            json_path = output_path
        
        # Sauvegarder le fichier JSON
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ R√©sultats sauvegard√©s dans {json_path}")
    
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde des r√©sultats: {str(e)}")

def batch_predict(input_dir, output_dir=None, visualize=False):
    """
    Traite plusieurs images en lot.
    
    Args:
        input_dir: R√©pertoire contenant les images √† traiter
        output_dir: R√©pertoire o√π sauvegarder les r√©sultats
        visualize: Afficher les visualisations
    """
    if not os.path.isdir(input_dir):
        print(f"‚ùå Le r√©pertoire {input_dir} n'existe pas")
        return
    
    # Cr√©er le r√©pertoire de sortie si n√©cessaire
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Obtenir la liste des images
    extensions = ['.jpg', '.jpeg', '.png']
    images = [
        os.path.join(input_dir, f) for f in os.listdir(input_dir)
        if os.path.splitext(f.lower())[1] in extensions
    ]
    
    if not images:
        print(f"‚ùå Aucune image trouv√©e dans {input_dir}")
        return
    
    print(f"üìÅ Traitement par lot de {len(images)} images...")
    
    # Statistiques
    successful = 0
    failed = 0
    results = []
    
    # Traiter chaque image
    for i, image_path in enumerate(images):
        print(f"\n[{i+1}/{len(images)}] Traitement de {os.path.basename(image_path)}")
        
        # Pr√©parer le chemin de sortie si n√©cessaire
        json_path = None
        if output_dir:
            base_name = os.path.splitext(os.path.basename(image_path))[0]
            json_path = os.path.join(output_dir, f"{base_name}_result.json")
        
        # Pr√©dire
        result = predict_image(image_path, visualize, json_path)
        
        if result:
            successful += 1
            results.append({
                "image": os.path.basename(image_path),
                "predicted_class": result["predicted_class"],
                "confidence": result["confidence"]
            })
        else:
            failed += 1
    
    # Afficher le r√©sum√©
    print("\nüìä R√âSUM√â DU TRAITEMENT PAR LOT")
    print("=" * 40)
    print(f"‚úÖ Images trait√©es avec succ√®s: {successful}")
    print(f"‚ùå √âchecs: {failed}")
    print(f"üìÅ Dossier de sortie: {output_dir or 'Non sp√©cifi√©'}")
    print("=" * 40)
    
    # Si on a un dossier de sortie, cr√©er un fichier de r√©sum√©
    if output_dir and successful > 0:
        summary_path = os.path.join(output_dir, "batch_summary.json")
        try:
            with open(summary_path, 'w', encoding='utf-8') as f:
                json.dump({
                    "timestamp": datetime.now().isoformat(),
                    "total": len(images),
                    "successful": successful,
                    "failed": failed,
                    "results": results
                }, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ R√©sum√© sauvegard√© dans {summary_path}")
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde du r√©sum√©: {str(e)}")

def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(description="Client pour l'API de classification des prunes")
    
    # Param√®tres g√©n√©raux
    parser.add_argument("--url", default=BASE_URL, help=f"URL de base de l'API (d√©faut: {BASE_URL})")
    parser.add_argument("--health", action="store_true", help="V√©rifier l'√©tat de sant√© de l'API")
    
    # Sous-parseurs pour les diff√©rentes commandes
    subparsers = parser.add_subparsers(dest="command", help="Commande √† ex√©cuter")
    
    # Parser pour la commande "predict"
    predict_parser = subparsers.add_parser("predict", help="Classifier une image de prune")
    predict_parser.add_argument("image", help="Chemin vers l'image √† classifier")
    predict_parser.add_argument("--visualize", "-v", action="store_true", help="Afficher une visualisation graphique")
    predict_parser.add_argument("--output", "-o", help="Chemin o√π sauvegarder les r√©sultats en JSON")
    
    # Parser pour la commande "batch"
    batch_parser = subparsers.add_parser("batch", help="Classifier plusieurs images en lot")
    batch_parser.add_argument("input_dir", help="R√©pertoire contenant les images √† classifier")
    batch_parser.add_argument("--output-dir", "-o", help="R√©pertoire o√π sauvegarder les r√©sultats")
    batch_parser.add_argument("--visualize", "-v", action="store_true", help="Afficher les visualisations")
    
    # Analyser les arguments
    args = parser.parse_args()
    
    # Mettre √† jour l'URL de base si sp√©cifi√©e
    global BASE_URL
    if args.url:
        BASE_URL = args.url
    
    # V√©rifier l'√©tat de sant√© si demand√© ou avant chaque commande
    if args.health or args.command:
        if not check_api_health():
            print("‚ùå L'API n'est pas disponible ou en bon √©tat. Arr√™t.")
            sys.exit(1)
    
    # Si aucune commande n'est sp√©cifi√©e, afficher l'aide
    if not args.command and not args.health:
        parser.print_help()
        sys.exit(0)
    
    # Ex√©cuter la commande appropri√©e
    if args.command == "predict":
        predict_image(args.image, args.visualize, args.output)
    elif args.command == "batch":
        batch_predict(args.input_dir, args.output_dir, args.visualize)

if __name__ == "__main__":
    main()
